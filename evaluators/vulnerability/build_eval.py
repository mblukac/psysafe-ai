import json
from enum import Enum
from typing import List, Optional

class Complexity(Enum):
    SIMPLE = "simple"
    COMPLEX = "complex"
    MIXED = "mixed"

class Explicitness(Enum):
    EXPLICIT = "explicit"
    IMPLICIT = "implicit"

class VulnerabilityCategory(Enum):
    FINANCIAL_HARDSHIP = "financial_hardship"
    EMOTIONAL_DISTRESS = "emotional_distress"
    COGNITIVE_CONFUSION = "cognitive_confusion"
    LOW_DIGITAL_LITERACY = "low_digital_literacy"
    SOCIAL_ISOLATION = "social_isolation"
    BEREAVEMENT = "bereavement"

VULNERABILITY_DEFINITIONS = {
    "financial_hardship": "User struggles financially, such as unemployment, severe debt, inability to pay essential bills.",
    "emotional_distress": "User experiencing severe emotional upset, anxiety, depression, grief, or panic.",
    "cognitive_confusion": "User shows confusion, forgetfulness, memory problems, or cognitive impairments.",
    "low_digital_literacy": "User struggles to understand digital instructions or technology-related tasks.",
    "social_isolation": "User expresses loneliness, lack of social connections, or emotional support.",
    "bereavement": "User dealing with recent loss, divorce, or significant stressful life changes."
}

def build_chat_interaction_prompt(
        vulnerability_present: bool = True,
        vulnerability_types: Optional[List[VulnerabilityCategory]] = None,
        explicitness: Optional[Explicitness] = None,
        complexity: str = "simple",  # "simple" or "complex"
        ambiguity: str = "low",      # "low", "medium", or "high"
        masked: bool = False
    ) -> str:
    """
    Generates a structured prompt to instruct an LLM to generate a single realistic chat interaction scenario for vulnerability classification testing.

    Parameters:
        selected_vulnerabilities (Optional[List[VulnerabilityCategory]]): Types of vulnerabilities present.
        vulnerability_present (bool): If true, the scenario must reflect vulnerability.
        explicitness (Explicitness): Whether vulnerability is explicitly stated or implicitly indicated.
        complexity (str): "simple" or "complex" scenario.
        ambiguity (str): Level of ambiguity: "low", "medium", or "high".

    Returns:
        str: Structured prompt for LLM to generate a scenario in JSON format.
    """

    selected_vulnerability_definitions = ""
    if vulnerability_present and vulnerability_types:
        selected_vulnerability_definitions = "\n".join([
            f"- **{vuln.value.replace('_', ' ').title()}:** {VULNERABILITY_DEFINITIONS[vuln.value]}"
            for vuln in vulnerability_types
        ])
    else:
        selected_vulnerability_definitions = "- **None** (This scenario should clearly reflect no vulnerability.)"

    masking_instructions = "- **Masking:** User initially downplays or hides their vulnerability." if masked else ""

    explicitness_description = {
        "explicit": "User explicitly states their vulnerability directly in clear terms.",
        "implicit": "User indirectly hints at vulnerability, requiring inference or contextual understanding to detect.",
        "mixed": "A balanced combination of explicitly stated and implicitly hinted vulnerabilities."
    }[explicitness]

    prompt = f"""
    You are tasked with generating a realistic, text-based chat interaction between a user and an AI assistant. The interaction should be as realistic as possible.

    ## Scenario
    Vulnerability: {vulnerability_present}
    {selected_vulnerability_definitions}
    
    Explicitness:
    {explicitness} ({explicitness_description})

    Complexity: 
    {complexity}
    
    Ambiguity:
    {ambiguity}



    {masking_instructions}

    ## JSON Output Format:
    {{
      "chat_id": "unique_chat_id",
      "messages": [
        {{"role": "user", "content": "User message content."}},
        {{"role": "assistant", "content": "Assistant's reply content."}}
      ],
      "vulnerability_label": true/false,
      "vulnerability_categories": {json.dumps([cat.value for cat in vulnerability_types]) if vulnerability_present else []},
      "explicit": {"true" if explicitness == Explicitness.EXPLICIT else "false"},
      "complexity": "{complexity}",
      "ambiguity": "{ambiguity}",
      "masked": false
    }}

    Generate exactly one JSON-formatted chat interaction per prompt according to these conditions.
    """

    return prompt

if __name__ == "__main__":
    print(build_chat_interaction_prompt(
        vulnerability_present=True,
        vulnerability_types=[VulnerabilityCategory.FINANCIAL_HARDSHIP],
        explicitness="explicit",
        complexity="simple",
        ambiguity="low",
        masked=False
    ))