# File: examples/01_vulnerability.py

# SECTION 1: Imports
from utils.llm_utils import load_environment
from pathlib import Path
import logging # Added for more detailed output if needed

# Import specific enums and guardrail
from psysafe.catalog.vulnerability_detection.guardrail import (
    VulnerabilityDetectionGuardrail,
    SensitivityLevel,
    VulnerabilityIndicators
)
from psysafe.core.models import Conversation, Message, CheckOutput
from psysafe.drivers.openai import OpenAIChatDriver

# Configure basic logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Load environment variables
# Assuming .env file is in the parent directory of 'examples'
# Adjust the path if your .env file is located elsewhere.
ENV_PATH = Path(__file__).resolve().parent.parent / ".env"
if ENV_PATH.exists():
    load_environment()
    logger.info(f".env file loaded")
else:
    logger.warning(f"Warning: .env file not found at {ENV_PATH}. OpenAI API key might not be loaded.")

def print_check_output(header: str, result: CheckOutput):
    """Helper function to print CheckOutput details."""
    print(f"\n--- {header} ---")
    print(f"Vulnerability Detected (is_triggered): {result.is_triggered}")
    
    # Details from the CheckOutput.details dictionary
    # The prompt specifies these fields: vulnerability_detected, severity_score, cwe_id, explanation, reasoning, confidence
    
    print(f"Severity Score (risk_score): {result.risk_score if result.risk_score is not None else 'N/A'}")
    print(f"CWE ID: {result.details.get('cwe_id', 'N/A')}") # Expected to be often null for psychological vulnerability
    print(f"Explanation: {result.details.get('explanation', 'N/A')}")
    
    if 'reasoning' in result.details:
        print(f"Reasoning: {result.details.get('reasoning', 'N/A')}")
    if 'confidence' in result.details:
        print(f"Confidence: {result.details.get('confidence', 'N/A')}")
        
    print(f"Full Details Dictionary: {result.details}")
    if result.errors:
        print(f"Errors: {result.errors}")
def main():
    """
    Main function to demonstrate the VulnerabilityDetectionGuardrail
    focused on psychological vulnerability.
    """
    # SUBSECTION 2.1: Initialize Guardrail
    logger.info("Initializing VulnerabilityDetectionGuardrail for psychological vulnerability...")
    # Initialize with all indicators, medium sensitivity, and enable reasoning/confidence
    try:
        guardrail = VulnerabilityDetectionGuardrail(
            indicators=[
                VulnerabilityIndicators.HEALTH_CONDITIONS,
                VulnerabilityIndicators.LIFE_EVENTS,
                VulnerabilityIndicators.RESILIENCE,
                VulnerabilityIndicators.CAPABILITY,
            ],
            sensitivity=SensitivityLevel.MEDIUM,
            reasoning=True,
            confidence=True
        )
        logger.info("Guardrail initialized successfully.")
    except Exception as e:
        logger.error(f"Error initializing VulnerabilityDetectionGuardrail: {e}")
        return

    # SUBSECTION 2.1.1: Initialize and Bind LLM Driver
    logger.info("Initializing LLM driver (OpenAIChatDriver)...")
    try:
        # Using a model known for good instruction following and JSON output
        driver = OpenAIChatDriver(model="gpt-4o-mini") # or "gpt-3.5-turbo"
        logger.info("LLM driver initialized.")
        logger.info("Binding driver to guardrail...")
        guardrail.set_driver(driver)
        logger.info("Driver bound to guardrail.")
    except Exception as e:
        logger.error(f"Error initializing or binding LLM driver: {e}")
        logger.error("The script will likely fail at the check step without a functional driver.")
        return # Exit if driver fails

    # SUBSECTION 2.2: Create Triggering Conversation (Psychological Vulnerability)
    logger.info("\nCreating a sample conversation designed to trigger psychological vulnerability detection...")
    triggering_messages_psychological = [
        Message(role="user", content="I just lost my job and my partner left me last week. I feel so alone and overwhelmed, I don't know how I'm going to pay my rent. Everything feels hopeless."),
        Message(role="assistant", content="I'm really sorry to hear you're going through such a difficult time. It sounds incredibly tough to deal with all of that at once."),
        Message(role="user", content="It is. I can't sleep, I can't eat. I saw an ad for a 'guaranteed loan' that seems too good to be true, but I'm so desperate I'm thinking of applying. I just need some way out.")
    ]
    triggering_conversation_psychological = Conversation(messages=triggering_messages_psychological)
    logger.info("Triggering conversation (Psychological Vulnerability) created.")

    # SUBSECTION 2.3: Create Non-Triggering Conversation (Neutral)
    logger.info("\nCreating a sample conversation designed NOT to trigger psychological vulnerability detection...")
    non_triggering_messages_neutral = [
        Message(role="user", content="What's the weather like today?"),
        Message(role="assistant", content="It's sunny with a high of 25 degrees Celsius."),
        Message(role="user", content="Great, I was thinking of going for a walk later.")
    ]
    non_triggering_conversation_neutral = Conversation(messages=non_triggering_messages_neutral)
    logger.info("Non-triggering conversation (Neutral) created.")

    # SUBSECTION 2.4: Process Triggering Conversation
    logger.info("\nProcessing the triggering conversation (Psychological Vulnerability)...")
    try:
        triggering_result = guardrail.check(conversation=triggering_conversation_psychological)
        logger.info("Processing complete for triggering conversation.")
        # SUBSECTION 2.5: Print Triggering Conversation Result
        print_check_output("Results for Triggering Conversation (Psychological Vulnerability)", triggering_result)
    except Exception as e:
        logger.error(f"Error processing triggering conversation: {e}")


    # SUBSECTION 2.6: Process Non-Triggering Conversation
    logger.info("\nProcessing the non-triggering conversation (Neutral)...")
    try:
        non_triggering_result = guardrail.check(conversation=non_triggering_conversation_neutral)
        logger.info("Processing complete for non-triggering conversation.")
        # SUBSECTION 2.7: Print Non-Triggering Conversation Result
        print_check_output("Results for Non-Triggering Conversation (Neutral)", non_triggering_result)
    except Exception as e:
        logger.error(f"Error processing non-triggering conversation: {e}")


# SECTION 3: Execute main function
if __name__ == "__main__":
    main()